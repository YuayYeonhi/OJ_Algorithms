/*
题目描述：
    对于任意一个数N（1<=N<=100），想要知道N！的尾部有多少个连续的0。例如对于样例输入的5，其阶乘的表示形式为5*4*3*2*1=120，那么其尾部就有一个0。
输入格式：
    输入一个数N。
输出格式：
    输出N！的尾部有多少个0
样例：
    样例输入 #1
        5
    样例输出 #1
        1
*/
/*解法：
    计算N！中因子5的数量，因为每个因子5都会为乘积增加一个因子10，从而添加一个尾随零。通过迭代从1到N的每个整数，并计算每个整数中因子5的数量来工作。然后将所有这些计数相加以获得N！中因子5的总数。这给出了N！中尾随零的数量。
    数字中可能会出现包含多个5的数字（比如25），就用$while$循环除到不能整除
*/
#include<iostream>
using namespace std;
int main()
{
	int n, cnt = 0;
	cin >> n;
	for (int i = 1; i <= n; i++)//从1穷举到n中5因子的个数
	{
		int temp = i;
		while (temp % 5 == 0)//遇上包含多个5（例如25），除到不能整除
		{
			cnt++;
			temp /= 5;
		}
	}
	cout << cnt;
	return 0;
}